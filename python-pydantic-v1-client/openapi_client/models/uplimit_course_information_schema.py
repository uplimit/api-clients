# coding: utf-8

"""
    Uplimit Organization API

    This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

    The version of the OpenAPI document: 2025-08-11
    Contact: hello@uplimit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class UplimitCourseInformationSchema(BaseModel):
    """
    UplimitCourseInformationSchema
    """
    uplimit_course_id: StrictStr = Field(default=..., alias="uplimitCourseId", description="Internal ID to identify the course across the Uplimit platform.")
    uplimit_course_slug: StrictStr = Field(default=..., alias="uplimitCourseSlug", description="The slug (i.e. short name) of the course across the Uplimit platform.")
    name: StrictStr = Field(default=..., description="The name of the course.")
    __properties = ["uplimitCourseId", "uplimitCourseSlug", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UplimitCourseInformationSchema:
        """Create an instance of UplimitCourseInformationSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UplimitCourseInformationSchema:
        """Create an instance of UplimitCourseInformationSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UplimitCourseInformationSchema.parse_obj(obj)

        _obj = UplimitCourseInformationSchema.parse_obj({
            "uplimit_course_id": obj.get("uplimitCourseId"),
            "uplimit_course_slug": obj.get("uplimitCourseSlug"),
            "name": obj.get("name")
        })
        return _obj


