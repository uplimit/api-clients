# coding: utf-8

"""
    Uplimit Organization API

    This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

    The version of the OpenAPI document: 2025-08-18
    Contact: hello@uplimit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class V1GetLearnerActivityStartPostRequest(BaseModel):
    """
    V1GetLearnerActivityStartPostRequest
    """
    session_ids: Optional[conlist(StrictStr)] = Field(default=None, alias="sessionIds", description="The IDs of the sessions to export activity for. If not provided, all sessions will be exported.")
    __properties = ["sessionIds"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1GetLearnerActivityStartPostRequest:
        """Create an instance of V1GetLearnerActivityStartPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1GetLearnerActivityStartPostRequest:
        """Create an instance of V1GetLearnerActivityStartPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1GetLearnerActivityStartPostRequest.parse_obj(obj)

        _obj = V1GetLearnerActivityStartPostRequest.parse_obj({
            "session_ids": obj.get("sessionIds")
        })
        return _obj


