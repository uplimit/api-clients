# coding: utf-8

"""
    Uplimit Organization API

    This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

    The version of the OpenAPI document: 2025-08-18
    Contact: hello@uplimit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class V1EnrollUserIntoCoursePostRequest(BaseModel):
    """
    V1EnrollUserIntoCoursePostRequest
    """
    email_address: StrictStr = Field(default=..., alias="emailAddress", description="The email address of the user.")
    uplimit_course_id: StrictStr = Field(default=..., alias="uplimitCourseId", description="Internal ID to identify the course across the Uplimit platform.")
    uplimit_enroll_user_into_course_session_selection_policy: StrictStr = Field(default=..., alias="uplimitEnrollUserIntoCourseSessionSelectionPolicy", description="The policy to decide which session to enroll a user into when enrolling the user into a course.")
    subscription_commitment_id: Optional[StrictStr] = Field(default=None, alias="subscriptionCommitmentId", description="Internal ID to identify the \"group\" the user belongs to within your organization. Leaving this blank will enroll the user into the default group.")
    __properties = ["emailAddress", "uplimitCourseId", "uplimitEnrollUserIntoCourseSessionSelectionPolicy", "subscriptionCommitmentId"]

    @validator('uplimit_enroll_user_into_course_session_selection_policy')
    def uplimit_enroll_user_into_course_session_selection_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ENROLL_INTO_CLOSEST_SESSION_START_DATE_AFTER_TODAY_ENROLLABLE_SESSION_TIEBREAK_BY_SESSION_CREATION_DATE_ASCENDING',):
            raise ValueError("must be one of enum values ('ENROLL_INTO_CLOSEST_SESSION_START_DATE_AFTER_TODAY_ENROLLABLE_SESSION_TIEBREAK_BY_SESSION_CREATION_DATE_ASCENDING')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1EnrollUserIntoCoursePostRequest:
        """Create an instance of V1EnrollUserIntoCoursePostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1EnrollUserIntoCoursePostRequest:
        """Create an instance of V1EnrollUserIntoCoursePostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1EnrollUserIntoCoursePostRequest.parse_obj(obj)

        _obj = V1EnrollUserIntoCoursePostRequest.parse_obj({
            "email_address": obj.get("emailAddress"),
            "uplimit_course_id": obj.get("uplimitCourseId"),
            "uplimit_enroll_user_into_course_session_selection_policy": obj.get("uplimitEnrollUserIntoCourseSessionSelectionPolicy"),
            "subscription_commitment_id": obj.get("subscriptionCommitmentId")
        })
        return _obj


