# coding: utf-8

"""
    Uplimit Organization API

    This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

    The version of the OpenAPI document: 2025-08-11
    Contact: hello@uplimit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class V1ToggleUserActivationPostRequest(BaseModel):
    """
    V1ToggleUserActivationPostRequest
    """
    email_address: StrictStr = Field(default=..., alias="emailAddress", description="The email address of the user.")
    set_is_active: StrictBool = Field(default=..., alias="setIsActive", description="Whether to set the user as active or inactive.")
    subscription_commitment_id: Optional[StrictStr] = Field(default=None, alias="subscriptionCommitmentId", description="(optional) The subscription commitment id to target. If not provided, the user will be activated on the default subscription commitment, or deactivated across all their subscription commitments.")
    do_not_send_welcome_email: Optional[StrictBool] = Field(default=None, alias="doNotSendWelcomeEmail", description="(optional) Whether to send the welcome email to the user when reactivating them. If not provided, the welcome email will be sent. This option is ignored when deactivating the user.")
    __properties = ["emailAddress", "setIsActive", "subscriptionCommitmentId", "doNotSendWelcomeEmail"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ToggleUserActivationPostRequest:
        """Create an instance of V1ToggleUserActivationPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ToggleUserActivationPostRequest:
        """Create an instance of V1ToggleUserActivationPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ToggleUserActivationPostRequest.parse_obj(obj)

        _obj = V1ToggleUserActivationPostRequest.parse_obj({
            "email_address": obj.get("emailAddress"),
            "set_is_active": obj.get("setIsActive"),
            "subscription_commitment_id": obj.get("subscriptionCommitmentId"),
            "do_not_send_welcome_email": obj.get("doNotSendWelcomeEmail")
        })
        return _obj


