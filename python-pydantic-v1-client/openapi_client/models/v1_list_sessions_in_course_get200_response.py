# coding: utf-8

"""
    Uplimit Organization API

    This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

    The version of the OpenAPI document: 2025-03-17
    Contact: hello@uplimit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, conlist
from openapi_client.models.v1_list_sessions_in_course_get200_response_sessions_inner import V1ListSessionsInCourseGet200ResponseSessionsInner

class V1ListSessionsInCourseGet200Response(BaseModel):
    """
    V1ListSessionsInCourseGet200Response
    """
    sessions: conlist(V1ListSessionsInCourseGet200ResponseSessionsInner) = Field(...)
    total_count: Union[StrictFloat, StrictInt] = Field(default=..., alias="totalCount")
    __properties = ["sessions", "totalCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1ListSessionsInCourseGet200Response:
        """Create an instance of V1ListSessionsInCourseGet200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sessions (list)
        _items = []
        if self.sessions:
            for _item in self.sessions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sessions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1ListSessionsInCourseGet200Response:
        """Create an instance of V1ListSessionsInCourseGet200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1ListSessionsInCourseGet200Response.parse_obj(obj)

        _obj = V1ListSessionsInCourseGet200Response.parse_obj({
            "sessions": [V1ListSessionsInCourseGet200ResponseSessionsInner.from_dict(_item) for _item in obj.get("sessions")] if obj.get("sessions") is not None else None,
            "total_count": obj.get("totalCount")
        })
        return _obj


