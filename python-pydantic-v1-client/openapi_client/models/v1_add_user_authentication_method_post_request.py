# coding: utf-8

"""
    Uplimit Organization API

    This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

    The version of the OpenAPI document: 2025-08-18
    Contact: hello@uplimit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator

class V1AddUserAuthenticationMethodPostRequest(BaseModel):
    """
    V1AddUserAuthenticationMethodPostRequest
    """
    email_address: StrictStr = Field(default=..., alias="emailAddress", description="The email address of the user.")
    authentication_method: StrictStr = Field(default=..., alias="authenticationMethod", description="The authentication method to add to the user.")
    custom_authentication_method_provider_id: StrictStr = Field(default=..., alias="customAuthenticationMethodProviderId", description="For SAML and OAUTH2, this is the provider ID (will be supplied by Uplimit to the developer).")
    authentication_secret: StrictStr = Field(default=..., alias="authenticationSecret", description="The unique identity for the authentication method. For SAML, this is the SAML entity ID. For OAUTH2, this is the subject identifier (or sub).")
    __properties = ["emailAddress", "authenticationMethod", "customAuthenticationMethodProviderId", "authenticationSecret"]

    @validator('authentication_method')
    def authentication_method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SAML', 'OAUTH2',):
            raise ValueError("must be one of enum values ('SAML', 'OAUTH2')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> V1AddUserAuthenticationMethodPostRequest:
        """Create an instance of V1AddUserAuthenticationMethodPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> V1AddUserAuthenticationMethodPostRequest:
        """Create an instance of V1AddUserAuthenticationMethodPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return V1AddUserAuthenticationMethodPostRequest.parse_obj(obj)

        _obj = V1AddUserAuthenticationMethodPostRequest.parse_obj({
            "email_address": obj.get("emailAddress"),
            "authentication_method": obj.get("authenticationMethod"),
            "custom_authentication_method_provider_id": obj.get("customAuthenticationMethodProviderId"),
            "authentication_secret": obj.get("authenticationSecret")
        })
        return _obj


