/*
Uplimit Organization API

This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

API version: 2025-08-18
Contact: hello@uplimit.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1EnrollUserIntoCoursePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1EnrollUserIntoCoursePostRequest{}

// V1EnrollUserIntoCoursePostRequest struct for V1EnrollUserIntoCoursePostRequest
type V1EnrollUserIntoCoursePostRequest struct {
	// The email address of the user.
	EmailAddress string `json:"emailAddress"`
	// Internal ID to identify the course across the Uplimit platform.
	UplimitCourseId string `json:"uplimitCourseId"`
	// The policy to decide which session to enroll a user into when enrolling the user into a course.
	UplimitEnrollUserIntoCourseSessionSelectionPolicy string `json:"uplimitEnrollUserIntoCourseSessionSelectionPolicy"`
	// Internal ID to identify the \"group\" the user belongs to within your organization. Leaving this blank will enroll the user into the default group.
	SubscriptionCommitmentId *string `json:"subscriptionCommitmentId,omitempty"`
}

type _V1EnrollUserIntoCoursePostRequest V1EnrollUserIntoCoursePostRequest

// NewV1EnrollUserIntoCoursePostRequest instantiates a new V1EnrollUserIntoCoursePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EnrollUserIntoCoursePostRequest(emailAddress string, uplimitCourseId string, uplimitEnrollUserIntoCourseSessionSelectionPolicy string) *V1EnrollUserIntoCoursePostRequest {
	this := V1EnrollUserIntoCoursePostRequest{}
	this.EmailAddress = emailAddress
	this.UplimitCourseId = uplimitCourseId
	this.UplimitEnrollUserIntoCourseSessionSelectionPolicy = uplimitEnrollUserIntoCourseSessionSelectionPolicy
	return &this
}

// NewV1EnrollUserIntoCoursePostRequestWithDefaults instantiates a new V1EnrollUserIntoCoursePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EnrollUserIntoCoursePostRequestWithDefaults() *V1EnrollUserIntoCoursePostRequest {
	this := V1EnrollUserIntoCoursePostRequest{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value
func (o *V1EnrollUserIntoCoursePostRequest) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *V1EnrollUserIntoCoursePostRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *V1EnrollUserIntoCoursePostRequest) SetEmailAddress(v string) {
	o.EmailAddress = v
}

// GetUplimitCourseId returns the UplimitCourseId field value
func (o *V1EnrollUserIntoCoursePostRequest) GetUplimitCourseId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplimitCourseId
}

// GetUplimitCourseIdOk returns a tuple with the UplimitCourseId field value
// and a boolean to check if the value has been set.
func (o *V1EnrollUserIntoCoursePostRequest) GetUplimitCourseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplimitCourseId, true
}

// SetUplimitCourseId sets field value
func (o *V1EnrollUserIntoCoursePostRequest) SetUplimitCourseId(v string) {
	o.UplimitCourseId = v
}

// GetUplimitEnrollUserIntoCourseSessionSelectionPolicy returns the UplimitEnrollUserIntoCourseSessionSelectionPolicy field value
func (o *V1EnrollUserIntoCoursePostRequest) GetUplimitEnrollUserIntoCourseSessionSelectionPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplimitEnrollUserIntoCourseSessionSelectionPolicy
}

// GetUplimitEnrollUserIntoCourseSessionSelectionPolicyOk returns a tuple with the UplimitEnrollUserIntoCourseSessionSelectionPolicy field value
// and a boolean to check if the value has been set.
func (o *V1EnrollUserIntoCoursePostRequest) GetUplimitEnrollUserIntoCourseSessionSelectionPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplimitEnrollUserIntoCourseSessionSelectionPolicy, true
}

// SetUplimitEnrollUserIntoCourseSessionSelectionPolicy sets field value
func (o *V1EnrollUserIntoCoursePostRequest) SetUplimitEnrollUserIntoCourseSessionSelectionPolicy(v string) {
	o.UplimitEnrollUserIntoCourseSessionSelectionPolicy = v
}

// GetSubscriptionCommitmentId returns the SubscriptionCommitmentId field value if set, zero value otherwise.
func (o *V1EnrollUserIntoCoursePostRequest) GetSubscriptionCommitmentId() string {
	if o == nil || IsNil(o.SubscriptionCommitmentId) {
		var ret string
		return ret
	}
	return *o.SubscriptionCommitmentId
}

// GetSubscriptionCommitmentIdOk returns a tuple with the SubscriptionCommitmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EnrollUserIntoCoursePostRequest) GetSubscriptionCommitmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionCommitmentId) {
		return nil, false
	}
	return o.SubscriptionCommitmentId, true
}

// HasSubscriptionCommitmentId returns a boolean if a field has been set.
func (o *V1EnrollUserIntoCoursePostRequest) HasSubscriptionCommitmentId() bool {
	if o != nil && !IsNil(o.SubscriptionCommitmentId) {
		return true
	}

	return false
}

// SetSubscriptionCommitmentId gets a reference to the given string and assigns it to the SubscriptionCommitmentId field.
func (o *V1EnrollUserIntoCoursePostRequest) SetSubscriptionCommitmentId(v string) {
	o.SubscriptionCommitmentId = &v
}

func (o V1EnrollUserIntoCoursePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1EnrollUserIntoCoursePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emailAddress"] = o.EmailAddress
	toSerialize["uplimitCourseId"] = o.UplimitCourseId
	toSerialize["uplimitEnrollUserIntoCourseSessionSelectionPolicy"] = o.UplimitEnrollUserIntoCourseSessionSelectionPolicy
	if !IsNil(o.SubscriptionCommitmentId) {
		toSerialize["subscriptionCommitmentId"] = o.SubscriptionCommitmentId
	}
	return toSerialize, nil
}

func (o *V1EnrollUserIntoCoursePostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emailAddress",
		"uplimitCourseId",
		"uplimitEnrollUserIntoCourseSessionSelectionPolicy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1EnrollUserIntoCoursePostRequest := _V1EnrollUserIntoCoursePostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1EnrollUserIntoCoursePostRequest)

	if err != nil {
		return err
	}

	*o = V1EnrollUserIntoCoursePostRequest(varV1EnrollUserIntoCoursePostRequest)

	return err
}

type NullableV1EnrollUserIntoCoursePostRequest struct {
	value *V1EnrollUserIntoCoursePostRequest
	isSet bool
}

func (v NullableV1EnrollUserIntoCoursePostRequest) Get() *V1EnrollUserIntoCoursePostRequest {
	return v.value
}

func (v *NullableV1EnrollUserIntoCoursePostRequest) Set(val *V1EnrollUserIntoCoursePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EnrollUserIntoCoursePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EnrollUserIntoCoursePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EnrollUserIntoCoursePostRequest(val *V1EnrollUserIntoCoursePostRequest) *NullableV1EnrollUserIntoCoursePostRequest {
	return &NullableV1EnrollUserIntoCoursePostRequest{value: val, isSet: true}
}

func (v NullableV1EnrollUserIntoCoursePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EnrollUserIntoCoursePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


