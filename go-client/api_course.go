/*
Uplimit Organization API

This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

API version: 2025-03-07
Contact: hello@uplimit.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// CourseAPIService CourseAPI service
type CourseAPIService service

type ApiV1ListCoursesGetRequest struct {
	ctx context.Context
	ApiService *CourseAPIService
	skip *float32
	take *float32
}

func (r ApiV1ListCoursesGetRequest) Skip(skip float32) ApiV1ListCoursesGetRequest {
	r.skip = &skip
	return r
}

func (r ApiV1ListCoursesGetRequest) Take(take float32) ApiV1ListCoursesGetRequest {
	r.take = &take
	return r
}

func (r ApiV1ListCoursesGetRequest) Execute() (*V1ListCoursesGet200Response, *http.Response, error) {
	return r.ApiService.V1ListCoursesGetExecute(r)
}

/*
V1ListCoursesGet Method for V1ListCoursesGet

This API allows developers to list all courses in an organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ListCoursesGetRequest
*/
func (a *CourseAPIService) V1ListCoursesGet(ctx context.Context) ApiV1ListCoursesGetRequest {
	return ApiV1ListCoursesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListCoursesGet200Response
func (a *CourseAPIService) V1ListCoursesGetExecute(r ApiV1ListCoursesGetRequest) (*V1ListCoursesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListCoursesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CourseAPIService.V1ListCoursesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ListCourses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "form", "")
	}
	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV1ListSessionsInCourseGetRequest struct {
	ctx context.Context
	ApiService *CourseAPIService
	uplimitCourseId *string
	skip *float32
	take *float32
}

func (r ApiV1ListSessionsInCourseGetRequest) UplimitCourseId(uplimitCourseId string) ApiV1ListSessionsInCourseGetRequest {
	r.uplimitCourseId = &uplimitCourseId
	return r
}

func (r ApiV1ListSessionsInCourseGetRequest) Skip(skip float32) ApiV1ListSessionsInCourseGetRequest {
	r.skip = &skip
	return r
}

func (r ApiV1ListSessionsInCourseGetRequest) Take(take float32) ApiV1ListSessionsInCourseGetRequest {
	r.take = &take
	return r
}

func (r ApiV1ListSessionsInCourseGetRequest) Execute() (*V1ListSessionsInCourseGet200Response, *http.Response, error) {
	return r.ApiService.V1ListSessionsInCourseGetExecute(r)
}

/*
V1ListSessionsInCourseGet Method for V1ListSessionsInCourseGet

This API allows developers to list all sessions of a course.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV1ListSessionsInCourseGetRequest
*/
func (a *CourseAPIService) V1ListSessionsInCourseGet(ctx context.Context) ApiV1ListSessionsInCourseGetRequest {
	return ApiV1ListSessionsInCourseGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1ListSessionsInCourseGet200Response
func (a *CourseAPIService) V1ListSessionsInCourseGetExecute(r ApiV1ListSessionsInCourseGetRequest) (*V1ListSessionsInCourseGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1ListSessionsInCourseGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CourseAPIService.V1ListSessionsInCourseGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/ListSessionsInCourse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.uplimitCourseId == nil {
		return localVarReturnValue, nil, reportError("uplimitCourseId is required and must be specified")
	}

	if r.skip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip", r.skip, "form", "")
	}
	if r.take != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "take", r.take, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "uplimitCourseId", r.uplimitCourseId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
