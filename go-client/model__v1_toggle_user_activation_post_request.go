/*
Uplimit Organization API

This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

API version: 2025-08-11
Contact: hello@uplimit.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ToggleUserActivationPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ToggleUserActivationPostRequest{}

// V1ToggleUserActivationPostRequest struct for V1ToggleUserActivationPostRequest
type V1ToggleUserActivationPostRequest struct {
	// The email address of the user.
	EmailAddress string `json:"emailAddress"`
	// Whether to set the user as active or inactive.
	SetIsActive bool `json:"setIsActive"`
	// (optional) The subscription commitment id to target. If not provided, the user will be activated on the default subscription commitment, or deactivated across all their subscription commitments.
	SubscriptionCommitmentId *string `json:"subscriptionCommitmentId,omitempty"`
	// (optional) Whether to send the welcome email to the user when reactivating them. If not provided, the welcome email will be sent. This option is ignored when deactivating the user.
	DoNotSendWelcomeEmail *bool `json:"doNotSendWelcomeEmail,omitempty"`
}

type _V1ToggleUserActivationPostRequest V1ToggleUserActivationPostRequest

// NewV1ToggleUserActivationPostRequest instantiates a new V1ToggleUserActivationPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ToggleUserActivationPostRequest(emailAddress string, setIsActive bool) *V1ToggleUserActivationPostRequest {
	this := V1ToggleUserActivationPostRequest{}
	this.EmailAddress = emailAddress
	this.SetIsActive = setIsActive
	return &this
}

// NewV1ToggleUserActivationPostRequestWithDefaults instantiates a new V1ToggleUserActivationPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ToggleUserActivationPostRequestWithDefaults() *V1ToggleUserActivationPostRequest {
	this := V1ToggleUserActivationPostRequest{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value
func (o *V1ToggleUserActivationPostRequest) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *V1ToggleUserActivationPostRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *V1ToggleUserActivationPostRequest) SetEmailAddress(v string) {
	o.EmailAddress = v
}

// GetSetIsActive returns the SetIsActive field value
func (o *V1ToggleUserActivationPostRequest) GetSetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SetIsActive
}

// GetSetIsActiveOk returns a tuple with the SetIsActive field value
// and a boolean to check if the value has been set.
func (o *V1ToggleUserActivationPostRequest) GetSetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SetIsActive, true
}

// SetSetIsActive sets field value
func (o *V1ToggleUserActivationPostRequest) SetSetIsActive(v bool) {
	o.SetIsActive = v
}

// GetSubscriptionCommitmentId returns the SubscriptionCommitmentId field value if set, zero value otherwise.
func (o *V1ToggleUserActivationPostRequest) GetSubscriptionCommitmentId() string {
	if o == nil || IsNil(o.SubscriptionCommitmentId) {
		var ret string
		return ret
	}
	return *o.SubscriptionCommitmentId
}

// GetSubscriptionCommitmentIdOk returns a tuple with the SubscriptionCommitmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ToggleUserActivationPostRequest) GetSubscriptionCommitmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionCommitmentId) {
		return nil, false
	}
	return o.SubscriptionCommitmentId, true
}

// HasSubscriptionCommitmentId returns a boolean if a field has been set.
func (o *V1ToggleUserActivationPostRequest) HasSubscriptionCommitmentId() bool {
	if o != nil && !IsNil(o.SubscriptionCommitmentId) {
		return true
	}

	return false
}

// SetSubscriptionCommitmentId gets a reference to the given string and assigns it to the SubscriptionCommitmentId field.
func (o *V1ToggleUserActivationPostRequest) SetSubscriptionCommitmentId(v string) {
	o.SubscriptionCommitmentId = &v
}

// GetDoNotSendWelcomeEmail returns the DoNotSendWelcomeEmail field value if set, zero value otherwise.
func (o *V1ToggleUserActivationPostRequest) GetDoNotSendWelcomeEmail() bool {
	if o == nil || IsNil(o.DoNotSendWelcomeEmail) {
		var ret bool
		return ret
	}
	return *o.DoNotSendWelcomeEmail
}

// GetDoNotSendWelcomeEmailOk returns a tuple with the DoNotSendWelcomeEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ToggleUserActivationPostRequest) GetDoNotSendWelcomeEmailOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotSendWelcomeEmail) {
		return nil, false
	}
	return o.DoNotSendWelcomeEmail, true
}

// HasDoNotSendWelcomeEmail returns a boolean if a field has been set.
func (o *V1ToggleUserActivationPostRequest) HasDoNotSendWelcomeEmail() bool {
	if o != nil && !IsNil(o.DoNotSendWelcomeEmail) {
		return true
	}

	return false
}

// SetDoNotSendWelcomeEmail gets a reference to the given bool and assigns it to the DoNotSendWelcomeEmail field.
func (o *V1ToggleUserActivationPostRequest) SetDoNotSendWelcomeEmail(v bool) {
	o.DoNotSendWelcomeEmail = &v
}

func (o V1ToggleUserActivationPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ToggleUserActivationPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emailAddress"] = o.EmailAddress
	toSerialize["setIsActive"] = o.SetIsActive
	if !IsNil(o.SubscriptionCommitmentId) {
		toSerialize["subscriptionCommitmentId"] = o.SubscriptionCommitmentId
	}
	if !IsNil(o.DoNotSendWelcomeEmail) {
		toSerialize["doNotSendWelcomeEmail"] = o.DoNotSendWelcomeEmail
	}
	return toSerialize, nil
}

func (o *V1ToggleUserActivationPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emailAddress",
		"setIsActive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ToggleUserActivationPostRequest := _V1ToggleUserActivationPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ToggleUserActivationPostRequest)

	if err != nil {
		return err
	}

	*o = V1ToggleUserActivationPostRequest(varV1ToggleUserActivationPostRequest)

	return err
}

type NullableV1ToggleUserActivationPostRequest struct {
	value *V1ToggleUserActivationPostRequest
	isSet bool
}

func (v NullableV1ToggleUserActivationPostRequest) Get() *V1ToggleUserActivationPostRequest {
	return v.value
}

func (v *NullableV1ToggleUserActivationPostRequest) Set(val *V1ToggleUserActivationPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ToggleUserActivationPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ToggleUserActivationPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ToggleUserActivationPostRequest(val *V1ToggleUserActivationPostRequest) *NullableV1ToggleUserActivationPostRequest {
	return &NullableV1ToggleUserActivationPostRequest{value: val, isSet: true}
}

func (v NullableV1ToggleUserActivationPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ToggleUserActivationPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


