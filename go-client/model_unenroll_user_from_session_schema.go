/*
Uplimit Organization API

This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

API version: 2025-08-18
Contact: hello@uplimit.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnenrollUserFromSessionSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnenrollUserFromSessionSchema{}

// UnenrollUserFromSessionSchema struct for UnenrollUserFromSessionSchema
type UnenrollUserFromSessionSchema struct {
	// The email address of the user.
	EmailAddress string `json:"emailAddress"`
	// Internal ID to identify the session across the Uplimit platform.
	UplimitSessionId string `json:"uplimitSessionId"`
}

type _UnenrollUserFromSessionSchema UnenrollUserFromSessionSchema

// NewUnenrollUserFromSessionSchema instantiates a new UnenrollUserFromSessionSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnenrollUserFromSessionSchema(emailAddress string, uplimitSessionId string) *UnenrollUserFromSessionSchema {
	this := UnenrollUserFromSessionSchema{}
	this.EmailAddress = emailAddress
	this.UplimitSessionId = uplimitSessionId
	return &this
}

// NewUnenrollUserFromSessionSchemaWithDefaults instantiates a new UnenrollUserFromSessionSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnenrollUserFromSessionSchemaWithDefaults() *UnenrollUserFromSessionSchema {
	this := UnenrollUserFromSessionSchema{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value
func (o *UnenrollUserFromSessionSchema) GetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value
// and a boolean to check if the value has been set.
func (o *UnenrollUserFromSessionSchema) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EmailAddress, true
}

// SetEmailAddress sets field value
func (o *UnenrollUserFromSessionSchema) SetEmailAddress(v string) {
	o.EmailAddress = v
}

// GetUplimitSessionId returns the UplimitSessionId field value
func (o *UnenrollUserFromSessionSchema) GetUplimitSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplimitSessionId
}

// GetUplimitSessionIdOk returns a tuple with the UplimitSessionId field value
// and a boolean to check if the value has been set.
func (o *UnenrollUserFromSessionSchema) GetUplimitSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplimitSessionId, true
}

// SetUplimitSessionId sets field value
func (o *UnenrollUserFromSessionSchema) SetUplimitSessionId(v string) {
	o.UplimitSessionId = v
}

func (o UnenrollUserFromSessionSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnenrollUserFromSessionSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["emailAddress"] = o.EmailAddress
	toSerialize["uplimitSessionId"] = o.UplimitSessionId
	return toSerialize, nil
}

func (o *UnenrollUserFromSessionSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"emailAddress",
		"uplimitSessionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnenrollUserFromSessionSchema := _UnenrollUserFromSessionSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnenrollUserFromSessionSchema)

	if err != nil {
		return err
	}

	*o = UnenrollUserFromSessionSchema(varUnenrollUserFromSessionSchema)

	return err
}

type NullableUnenrollUserFromSessionSchema struct {
	value *UnenrollUserFromSessionSchema
	isSet bool
}

func (v NullableUnenrollUserFromSessionSchema) Get() *UnenrollUserFromSessionSchema {
	return v.value
}

func (v *NullableUnenrollUserFromSessionSchema) Set(val *UnenrollUserFromSessionSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUnenrollUserFromSessionSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUnenrollUserFromSessionSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnenrollUserFromSessionSchema(val *UnenrollUserFromSessionSchema) *NullableUnenrollUserFromSessionSchema {
	return &NullableUnenrollUserFromSessionSchema{value: val, isSet: true}
}

func (v NullableUnenrollUserFromSessionSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnenrollUserFromSessionSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


