/*
Uplimit Organization API

This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

API version: 2025-08-18
Contact: hello@uplimit.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateUserResponseSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserResponseSchema{}

// CreateUserResponseSchema struct for CreateUserResponseSchema
type CreateUserResponseSchema struct {
	// Internal ID to identify the user's membership within your organization on Uplimit.
	UplimitSubscriptionEnrollmentId string `json:"uplimitSubscriptionEnrollmentId"`
	// Internal ID to identify the user across the Uplimit platform.
	UplimitUserId string `json:"uplimitUserId"`
}

type _CreateUserResponseSchema CreateUserResponseSchema

// NewCreateUserResponseSchema instantiates a new CreateUserResponseSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserResponseSchema(uplimitSubscriptionEnrollmentId string, uplimitUserId string) *CreateUserResponseSchema {
	this := CreateUserResponseSchema{}
	this.UplimitSubscriptionEnrollmentId = uplimitSubscriptionEnrollmentId
	this.UplimitUserId = uplimitUserId
	return &this
}

// NewCreateUserResponseSchemaWithDefaults instantiates a new CreateUserResponseSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserResponseSchemaWithDefaults() *CreateUserResponseSchema {
	this := CreateUserResponseSchema{}
	return &this
}

// GetUplimitSubscriptionEnrollmentId returns the UplimitSubscriptionEnrollmentId field value
func (o *CreateUserResponseSchema) GetUplimitSubscriptionEnrollmentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplimitSubscriptionEnrollmentId
}

// GetUplimitSubscriptionEnrollmentIdOk returns a tuple with the UplimitSubscriptionEnrollmentId field value
// and a boolean to check if the value has been set.
func (o *CreateUserResponseSchema) GetUplimitSubscriptionEnrollmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplimitSubscriptionEnrollmentId, true
}

// SetUplimitSubscriptionEnrollmentId sets field value
func (o *CreateUserResponseSchema) SetUplimitSubscriptionEnrollmentId(v string) {
	o.UplimitSubscriptionEnrollmentId = v
}

// GetUplimitUserId returns the UplimitUserId field value
func (o *CreateUserResponseSchema) GetUplimitUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplimitUserId
}

// GetUplimitUserIdOk returns a tuple with the UplimitUserId field value
// and a boolean to check if the value has been set.
func (o *CreateUserResponseSchema) GetUplimitUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplimitUserId, true
}

// SetUplimitUserId sets field value
func (o *CreateUserResponseSchema) SetUplimitUserId(v string) {
	o.UplimitUserId = v
}

func (o CreateUserResponseSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserResponseSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uplimitSubscriptionEnrollmentId"] = o.UplimitSubscriptionEnrollmentId
	toSerialize["uplimitUserId"] = o.UplimitUserId
	return toSerialize, nil
}

func (o *CreateUserResponseSchema) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uplimitSubscriptionEnrollmentId",
		"uplimitUserId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserResponseSchema := _CreateUserResponseSchema{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUserResponseSchema)

	if err != nil {
		return err
	}

	*o = CreateUserResponseSchema(varCreateUserResponseSchema)

	return err
}

type NullableCreateUserResponseSchema struct {
	value *CreateUserResponseSchema
	isSet bool
}

func (v NullableCreateUserResponseSchema) Get() *CreateUserResponseSchema {
	return v.value
}

func (v *NullableCreateUserResponseSchema) Set(val *CreateUserResponseSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserResponseSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserResponseSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserResponseSchema(val *CreateUserResponseSchema) *NullableCreateUserResponseSchema {
	return &NullableCreateUserResponseSchema{value: val, isSet: true}
}

func (v NullableCreateUserResponseSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserResponseSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


