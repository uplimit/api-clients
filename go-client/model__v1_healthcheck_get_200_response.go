/*
Uplimit Organization API

This API is used to manage organizations within the Uplimit platform. For more information, please reach out to your Uplimit Enterprise contact.

API version: 2025-03-17
Contact: hello@uplimit.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1HealthcheckGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1HealthcheckGet200Response{}

// V1HealthcheckGet200Response struct for V1HealthcheckGet200Response
type V1HealthcheckGet200Response struct {
	Success bool `json:"success"`
	// The Uplimit ID of the organization.
	UplimitOrganizationId string `json:"uplimitOrganizationId"`
	// The name of the organization as it appears in Uplimit.
	UplimitOrganizationName string `json:"uplimitOrganizationName"`
}

type _V1HealthcheckGet200Response V1HealthcheckGet200Response

// NewV1HealthcheckGet200Response instantiates a new V1HealthcheckGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1HealthcheckGet200Response(success bool, uplimitOrganizationId string, uplimitOrganizationName string) *V1HealthcheckGet200Response {
	this := V1HealthcheckGet200Response{}
	this.Success = success
	this.UplimitOrganizationId = uplimitOrganizationId
	this.UplimitOrganizationName = uplimitOrganizationName
	return &this
}

// NewV1HealthcheckGet200ResponseWithDefaults instantiates a new V1HealthcheckGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HealthcheckGet200ResponseWithDefaults() *V1HealthcheckGet200Response {
	this := V1HealthcheckGet200Response{}
	return &this
}

// GetSuccess returns the Success field value
func (o *V1HealthcheckGet200Response) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *V1HealthcheckGet200Response) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *V1HealthcheckGet200Response) SetSuccess(v bool) {
	o.Success = v
}

// GetUplimitOrganizationId returns the UplimitOrganizationId field value
func (o *V1HealthcheckGet200Response) GetUplimitOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplimitOrganizationId
}

// GetUplimitOrganizationIdOk returns a tuple with the UplimitOrganizationId field value
// and a boolean to check if the value has been set.
func (o *V1HealthcheckGet200Response) GetUplimitOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplimitOrganizationId, true
}

// SetUplimitOrganizationId sets field value
func (o *V1HealthcheckGet200Response) SetUplimitOrganizationId(v string) {
	o.UplimitOrganizationId = v
}

// GetUplimitOrganizationName returns the UplimitOrganizationName field value
func (o *V1HealthcheckGet200Response) GetUplimitOrganizationName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UplimitOrganizationName
}

// GetUplimitOrganizationNameOk returns a tuple with the UplimitOrganizationName field value
// and a boolean to check if the value has been set.
func (o *V1HealthcheckGet200Response) GetUplimitOrganizationNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UplimitOrganizationName, true
}

// SetUplimitOrganizationName sets field value
func (o *V1HealthcheckGet200Response) SetUplimitOrganizationName(v string) {
	o.UplimitOrganizationName = v
}

func (o V1HealthcheckGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1HealthcheckGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["uplimitOrganizationId"] = o.UplimitOrganizationId
	toSerialize["uplimitOrganizationName"] = o.UplimitOrganizationName
	return toSerialize, nil
}

func (o *V1HealthcheckGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"uplimitOrganizationId",
		"uplimitOrganizationName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1HealthcheckGet200Response := _V1HealthcheckGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1HealthcheckGet200Response)

	if err != nil {
		return err
	}

	*o = V1HealthcheckGet200Response(varV1HealthcheckGet200Response)

	return err
}

type NullableV1HealthcheckGet200Response struct {
	value *V1HealthcheckGet200Response
	isSet bool
}

func (v NullableV1HealthcheckGet200Response) Get() *V1HealthcheckGet200Response {
	return v.value
}

func (v *NullableV1HealthcheckGet200Response) Set(val *V1HealthcheckGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV1HealthcheckGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV1HealthcheckGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1HealthcheckGet200Response(val *V1HealthcheckGet200Response) *NullableV1HealthcheckGet200Response {
	return &NullableV1HealthcheckGet200Response{value: val, isSet: true}
}

func (v NullableV1HealthcheckGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1HealthcheckGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


